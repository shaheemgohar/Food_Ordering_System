package Adminn;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Shaheem
 */

public class adminCustomerTopUp extends javax.swing.JFrame implements adminTableMusts {

    protected String userID;
    protected String amountAdded;
    protected String updatedBalance;
    private boolean addButtonPressed = false;
    
    
    public adminCustomerTopUp() {
        initComponents();
        refreshData();
    }

        //refresh and display data in the table
    public void refreshData(){
        try{
        DefaultTableModel model = (DefaultTableModel) customerTopUpTable.getModel();
        model.setRowCount(0);
        
        //reading file
        
        String filename = "registeredusers.txt";
        BufferedReader br = new BufferedReader(new FileReader(filename));
        String line;
        
        while((line = br.readLine())!= null){
            String[] data = line.split(";");
          if(data[5].equals("Customer")){
              
            model.addRow(new Object[]{
                data[0],data[3],data[6]
            });
          }  
        
        }
        
        }catch(IOException e){
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentBalancelbl = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        balanceAfterAddinglbl = new javax.swing.JLabel();
        backbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTopUpTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        amounttxt = new javax.swing.JTextField();
        addbtn = new javax.swing.JButton();
        generateReciept = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        customerTopUpSearchField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        currentBalancelbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        currentBalancelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentBalancelbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel5.setText("New Balance");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("CUSTOMER TOP UP");

        balanceAfterAddinglbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        balanceAfterAddinglbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        balanceAfterAddinglbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        backbtn.setBackground(new java.awt.Color(195, 228, 255));
        backbtn.setForeground(new java.awt.Color(0, 0, 0));
        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        customerTopUpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Name", "Balance"
            }
        ));
        customerTopUpTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTopUpTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customerTopUpTable);

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel2.setText("Current Balance");

        amounttxt.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        amounttxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        amounttxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amounttxtKeyReleased(evt);
            }
        });

        addbtn.setBackground(new java.awt.Color(186, 208, 18));
        addbtn.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        addbtn.setForeground(new java.awt.Color(0, 0, 0));
        addbtn.setText("Add");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        generateReciept.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        generateReciept.setText("Generate Receipt");
        generateReciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRecieptActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel3.setText("Add Balance");

        customerTopUpSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerTopUpSearchFieldActionPerformed(evt);
            }
        });
        customerTopUpSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerTopUpSearchFieldKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        jLabel4.setText("Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(91, 91, 91)
                            .addComponent(jLabel5)
                            .addGap(37, 37, 37)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(generateReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(balanceAfterAddinglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(199, 199, 199)
                                    .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addComponent(backbtn)
                            .addGap(105, 105, 105)
                            .addComponent(jLabel1))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(37, 37, 37)
                                    .addComponent(amounttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(37, 37, 37)
                                    .addComponent(currentBalancelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(180, 180, 180))))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(customerTopUpSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(backbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerTopUpSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentBalancelbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(amounttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))
                        .addGap(49, 49, 49)
                        .addComponent(jLabel5))
                    .addComponent(balanceAfterAddinglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(generateReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        this.dispose();
        new adminHomePage().setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    private void customerTopUpTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTopUpTableMouseClicked
        int SelectedRow = customerTopUpTable.getSelectedRow();
        String amount;
        if(SelectedRow != -1){
            amount = (String) customerTopUpTable.getValueAt(SelectedRow, 2);
            currentBalancelbl.setText(amount);
        }

    }//GEN-LAST:event_customerTopUpTableMouseClicked

    private void amounttxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amounttxtKeyReleased
        int SelectedRow = customerTopUpTable.getSelectedRow();
        if(SelectedRow != -1)
        balanceAfterAdding();
    }//GEN-LAST:event_amounttxtKeyReleased

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        try{
            int amount,sum,currentbalance;
            int SelectedRow = customerTopUpTable.getSelectedRow(), CurrentRow=0;
            String userID = (String) customerTopUpTable.getValueAt(SelectedRow,0);
            //Calculations
            amount = Integer.parseInt(amounttxt.getText());
            currentbalance = Integer.parseInt(currentBalancelbl.getText());
            sum = amount + currentbalance;
            String updatedBalance = String.valueOf(sum);

            //writing balance to customerTransHistory for receipt
            FileWriter fw2 =  new FileWriter("customerTransHistory.txt", true);
            fw2.write(
                userID + ";" + amounttxt.getText() + ";" + updatedBalance  + ";"  + "\n"
            );
            fw2.close();

            //passing it on to generateReceipt class for constructor
            this.userID = userID;
            this.amountAdded = amounttxt.getText();
            this.updatedBalance = updatedBalance;

            //        adminGenerateReceipt receipt = new adminGenerateReceipt(userID, String.valueOf(amount), updatedBalance);

            //updating balance in registeredusers.txt
            String filename = "registeredusers.txt";
            BufferedReader br = new BufferedReader(new FileReader(filename));
            StringBuilder filecontent = new StringBuilder();
            String line;

            while((line = br.readLine()) != null){
                String[] data = line.split(";");

                if(!(data[0].equals(userID))){
                    filecontent.append(line).append("\n");
                }

                if(data[0].equals(userID)){

                    if(data[5].equals("Customer")){

                        data[6] = updatedBalance;
                        String newLine = data[0] + ";" + data[1] + ";" + data[2]+ ";" + data[3] + ";" + data[4] + ";" + data[5] + ";" + data[6] + ";";
                        filecontent.append(newLine).append("\n");

                    }
                }

                CurrentRow++;

            }
            br.close();
            FileWriter fw = new FileWriter(filename);
            fw.write(filecontent.toString());
            fw.close();
            refreshData();
            addButtonPressed = true;
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_addbtnActionPerformed
    public String getUserID() {
        return userID;
    }

    public String getAmountAdded() {
        return amountAdded;
    }

    public String getUpdatedBalance() {
        return updatedBalance;
    }
    private void generateRecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRecieptActionPerformed
        //        adminGenerateReceipt receipt = new adminGenerateReceipt();
        //        receipt.setReceiptData(this.userID, this.amountAdded, this.updatedBalance);
        //
        //        receipt.generateReceipt();
        //        receipt.setVisible(true);
        if(addButtonPressed){
            generateReceiptBtnAction(this.userID, this.amountAdded, this.updatedBalance);
        }else if(!addButtonPressed){
            JOptionPane.showMessageDialog(null, "Please top up amount and then press the Add button first!");
        }

    }//GEN-LAST:event_generateRecieptActionPerformed

    private void customerTopUpSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerTopUpSearchFieldActionPerformed
    }//GEN-LAST:event_customerTopUpSearchFieldActionPerformed

    private void customerTopUpSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerTopUpSearchFieldKeyReleased
        DefaultTableModel table = (DefaultTableModel) customerTopUpTable.getModel();
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(table);
        customerTopUpTable.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(customerTopUpSearchField.getText()));
    }//GEN-LAST:event_customerTopUpSearchFieldKeyReleased
   
    private void generateReceiptBtnAction(String userID, String amountAdded, String updatedBalance){     
        adminGenerateReceipt receipt = new adminGenerateReceipt();
        
        receipt.generateReceipt(userID, amountAdded, updatedBalance);
        receipt.setVisible(true);
        addButtonPressed = false; //resets to require add btn again
    }
    
    //dynamically shows the new balance field
    public void  balanceAfterAdding(){
        int amount = 0,sum,currentbalance;
        String line;
            //show updated balance
            //take value from amount (to be added) + the current balance, turn it into string and display it
            //adding try catch so terminal doesn't show error when amount is empty
        try{
            String amountText = amounttxt.getText();
            if(!amountText.isEmpty()){
                amount = Integer.parseInt(amountText);
            }else{
             amount = 0; //if empty treat it as 0   
            }
        }catch(NumberFormatException e){
            currentbalance = 0;
        }
        
        try{
            currentbalance = Integer.parseInt(currentBalancelbl.getText());
        }catch(NumberFormatException e){
            currentbalance = 0;
        }            
            
            sum = amount + currentbalance;
            balanceAfterAddinglbl.setText(String.valueOf(sum)); //or Integer.toString(sum)
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminCustomerTopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminCustomerTopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminCustomerTopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminCustomerTopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminCustomerTopUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JTextField amounttxt;
    private javax.swing.JButton backbtn;
    private javax.swing.JLabel balanceAfterAddinglbl;
    private javax.swing.JLabel currentBalancelbl;
    private javax.swing.JTextField customerTopUpSearchField;
    private javax.swing.JTable customerTopUpTable;
    private javax.swing.JButton generateReciept;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
